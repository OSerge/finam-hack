#!/usr/bin/env python3
"""
Streamlit –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —Ç—Ä–µ–π–¥–µ—Ä–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π MCP tools

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    poetry run streamlit run src/app/chat_app.py
    streamlit run src/app/chat_app.py
"""

import asyncio
import json
from typing import Any

import streamlit as st

from src.app.core import MCPClient, call_llm_with_tools, get_settings


def _old_system_prompt() -> str:
    """–°–æ–∑–¥–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"""
    return """–¢—ã - AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Ç—Ä–µ–π–¥–µ—Ä–∞, —Ä–∞–±–æ—Ç–∞—é—â–∏–π —Å Finam TradeAPI.

–ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–¥–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –æ —Ä—ã–Ω–∫–µ, –ø–æ—Ä—Ç—Ñ–µ–ª–µ –∏–ª–∏ —Ö–æ—á–µ—Ç —Å–æ–≤–µ—Ä—à–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ:
1. –û–ø—Ä–µ–¥–µ–ª–∏ –Ω—É–∂–Ω—ã–π API endpoint
2. –£–∫–∞–∂–∏ –∑–∞–ø—Ä–æ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: API_REQUEST: METHOD /path
3. –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö - –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏—Ö –∏ –¥–∞–π –ø–æ–Ω—è—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç

–î–æ—Å—Ç—É–ø–Ω—ã–µ endpoints:
- GET /v1/instruments/{symbol}/quotes/latest - –∫–æ—Ç–∏—Ä–æ–≤–∫–∞
- GET /v1/instruments/{symbol}/orderbook - —Å—Ç–∞–∫–∞–Ω
- GET /v1/instruments/{symbol}/bars - —Å–≤–µ—á–∏
- GET /v1/accounts/{account_id} - —Å—á–µ—Ç –∏ –ø–æ–∑–∏—Ü–∏–∏
- GET /v1/accounts/{account_id}/orders - –æ—Ä–¥–µ—Ä–∞
- POST /v1/accounts/{account_id}/orders - —Å–æ–∑–¥–∞—Ç—å –æ—Ä–¥–µ—Ä
- DELETE /v1/accounts/{account_id}/orders/{order_id} - –æ—Ç–º–µ–Ω–∏—Ç—å –æ—Ä–¥–µ—Ä

–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É."""

def create_system_prompt() -> str:
    """–°–æ–∑–¥–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"""
    return """–¢—ã - AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Ç—Ä–µ–π–¥–µ—Ä–∞, —Ä–∞–±–æ—Ç–∞—é—â–∏–π —Å Finam TradeAPI.

–£ —Ç–µ–±—è –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ä–∞–∑–ª–∏—á–Ω—ã–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∏—Ä–∂–µ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏:
- –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—Ç–∏—Ä–æ–≤–æ–∫ –∏ —Å—Ç–∞–∫–∞–Ω–æ–≤ –∑–∞—è–≤–æ–∫
- –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Ä—Ç—Ñ–µ–ª—è –∏ —Å—á–µ—Ç–æ–≤
- –ü–æ–∏—Å–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
- –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö (—Å–≤–µ—á–µ–π)
- –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫

–ò—Å–ø–æ–ª—å–∑—É–π –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É.
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –¥–∞–≤–∞–π –ø–æ–ª–µ–∑–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã."""


async def execute_tool_calls(
    mcp_url: str,
    tool_calls: list[dict[str, Any]]
) -> list[dict[str, Any]]:
    """
    –í—ã–ø–æ–ª–Ω–∏—Ç—å –≤—ã–∑–æ–≤—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ MCP –∫–ª–∏–µ–Ω—Ç
    
    Args:
        mcp_url: URL MCP —Å–µ—Ä–≤–µ—Ä–∞
        tool_calls: –°–ø–∏—Å–æ–∫ –≤—ã–∑–æ–≤–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –æ—Ç LLM
        
    Returns:
        –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    """
    results = []
    
    async with MCPClient(base_url=mcp_url) as client:
        for tool_call in tool_calls:
            tool_name = tool_call["function"]["name"]
            
            try:
                if isinstance(tool_call["function"]["arguments"], str):
                    arguments = json.loads(tool_call["function"]["arguments"])
                else:
                    arguments = tool_call["function"]["arguments"]
            except json.JSONDecodeError:
                arguments = {}
            
            try:
                result = await client.call_tool(tool_name, arguments)
                results.append({
                    "tool_call_id": tool_call["id"],
                    "role": "tool",
                    "name": tool_name,
                    "content": json.dumps(result, ensure_ascii=False)
                })
            except Exception as e:
                results.append({
                    "tool_call_id": tool_call["id"],
                    "role": "tool",
                    "name": tool_name,
                    "content": json.dumps({"error": str(e)}, ensure_ascii=False)
                })
    
    return results


def main() -> None:  # noqa: C901
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è Streamlit –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    st.set_page_config(page_title="AI –¢—Ä–µ–π–¥–µ—Ä (Finam)", page_icon="ü§ñ", layout="wide")

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    st.title("ü§ñ AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –¢—Ä–µ–π–¥–µ—Ä–∞")
    st.caption("–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ Finam TradeAPI —á–µ—Ä–µ–∑ MCP")

    # Sidebar —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    with st.sidebar:
        st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        settings = get_settings()
        st.info(f"**–ú–æ–¥–µ–ª—å:** {settings.openrouter_model}")

        with st.expander("üîå MCP –°–µ—Ä–≤–µ—Ä", expanded=False):
            mcp_url = st.text_input(
                "MCP Server URL",
                value="http://mcp-server:8765",
                help="URL MCP —Å–µ—Ä–≤–µ—Ä–∞ (–≤ Docker: mcp-server:8765, –ª–æ–∫–∞–ª—å–Ω–æ: localhost:8765)"
            )

        if st.button("üîÑ –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é"):
            st.session_state.messages = []
            st.session_state.tools_loaded = False
            st.rerun()

        st.markdown("---")
        st.markdown("### üí° –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:")
        st.markdown("""
        - –ö–∞–∫–∞—è —Ü–µ–Ω–∞ –°–±–µ—Ä–±–∞–Ω–∫–∞?
        - –ü–æ–∫–∞–∂–∏ –º–æ–π –ø–æ—Ä—Ç—Ñ–µ–ª—å
        - –ß—Ç–æ –≤ —Å—Ç–∞–∫–∞–Ω–µ –ø–æ –ì–∞–∑–ø—Ä–æ–º—É?
        - –ù–∞–π–¥–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É YNDX
        - –ü–æ–∫–∞–∂–∏ —Å–≤–µ—á–∏ SBER –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏
        - –ö–∞–∫–∏–µ —É –º–µ–Ω—è –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞?
        - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        """)

    if "messages" not in st.session_state:
        st.session_state.messages = []
    
    if "tools_loaded" not in st.session_state:
        st.session_state.tools_loaded = False
        st.session_state.tools = []

    # –ó–∞–≥—Ä—É–∑–∫–∞ tools –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
    if not st.session_state.tools_loaded:
        with st.spinner("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏–∑ MCP —Å–µ—Ä–≤–µ—Ä–∞..."):
            try:
                async def load_tools():
                    async with MCPClient(base_url=mcp_url) as client:
                        return await client.get_openai_tools()
                
                tools = asyncio.run(load_tools())
                st.session_state.tools = tools
                st.session_state.tools_loaded = True
                st.sidebar.success(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(tools)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
            except Exception as e:
                st.sidebar.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MCP —Å–µ—Ä–≤–µ—Ä—É: {e}")
                st.sidebar.info("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ MCP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω")

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    if st.session_state.tools_loaded and st.sidebar.checkbox("üìã –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", value=False):
        with st.sidebar.expander("üõ†Ô∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", expanded=True):
            for tool in st.session_state.tools:
                func = tool["function"]
                st.markdown(f"**{func['name']}**")
                st.caption(func.get("description", "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"))

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    for message in st.session_state.messages:
        with st.chat_message(message["role"]):
            st.markdown(message["content"])

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–∑–æ–≤—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            if "tool_calls" in message and message["tool_calls"]:
                with st.expander("üîß –í—ã–∑–æ–≤—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"):
                    for tc in message["tool_calls"]:
                        func_name = tc["function"]["name"]
                        try:
                            args = json.loads(tc["function"]["arguments"]) if isinstance(tc["function"]["arguments"], str) else tc["function"]["arguments"]
                            st.code(f"{func_name}({json.dumps(args, ensure_ascii=False, indent=2)})", language="python")
                        except:
                            st.code(f"{func_name}(...)", language="python")

    # –ü–æ–ª–µ –≤–≤–æ–¥–∞
    if prompt := st.chat_input("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å..."):
        if not st.session_state.tools_loaded:
            st.error("‚ùå –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MCP —Å–µ—Ä–≤–µ—Ä—É.")
            return

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        st.session_state.messages.append({"role": "user", "content": prompt})
        with st.chat_message("user"):
            st.markdown(prompt)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è LLM
        conversation_history = [{"role": "system", "content": create_system_prompt()}]
        for msg in st.session_state.messages:
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
            history_msg = {"role": msg["role"], "content": msg["content"]}
            
            # –î–ª—è assistant —Å tool_calls –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö
            if msg["role"] == "assistant" and "tool_calls" in msg:
                history_msg["tool_calls"] = msg["tool_calls"]
            
            conversation_history.append(history_msg)

        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        with st.chat_message("assistant"), st.spinner("–î—É–º–∞—é..."):
            try:
                max_iterations = 5
                iteration = 0
                
                while iteration < max_iterations:
                    iteration += 1
                    
                    # –í—ã–∑—ã–≤–∞–µ–º LLM —Å tools
                    response = call_llm_with_tools(
                        conversation_history, 
                        st.session_state.tools,
                        temperature=0.3
                    )
                    
                    assistant_message = response["choices"][0]["message"]
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ tool_calls
                    if "tool_calls" in assistant_message and assistant_message["tool_calls"]:
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –≤—ã–ø–æ–ª–Ω—è–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
                        tool_names = [tc["function"]["name"] for tc in assistant_message["tool_calls"]]
                        st.info(f"üîß –í—ã–ø–æ–ª–Ω—è—é: {', '.join(tool_names)}")
                        
                        # –í—ã–ø–æ–ª–Ω—è–µ–º tool calls
                        tool_results = asyncio.run(
                            execute_tool_calls(mcp_url, assistant_message["tool_calls"])
                        )
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                        with st.expander("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤", expanded=False):
                            for result in tool_results:
                                st.markdown(f"**{result['name']}:**")
                                try:
                                    result_data = json.loads(result["content"])
                                    st.json(result_data)
                                except:
                                    st.text(result["content"])
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                        conversation_history.append({
                            "role": "assistant",
                            "content": assistant_message.get("content") or "",
                            "tool_calls": assistant_message["tool_calls"]
                        })
                        
                        for result in tool_results:
                            conversation_history.append(result)
                        
                        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ü–∏–∫–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                        continue
                    
                    # –ï—Å–ª–∏ –Ω–µ—Ç tool_calls, –∑–Ω–∞—á–∏—Ç –ø–æ–ª—É—á–∏–ª–∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
                    final_content = assistant_message.get("content", "")
                    
                    if final_content:
                        st.markdown(final_content)
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
                        st.session_state.messages.append({
                            "role": "assistant",
                            "content": final_content
                        })
                    
                    break
                
                if iteration >= max_iterations:
                    st.warning("‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π")

            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                if settings.debug:
                    st.exception(e)


if __name__ == "__main__":
    main()
