"""
MCP-—Å–µ—Ä–≤–µ—Ä —Å HTTP-—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–º –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Finam TradeAPI
"""

import requests
from fastmcp import FastMCP

mcp = FastMCP("Finam Trader MCP Server")


@mcp.tool()
def check_finam_api() -> dict[str, str | int]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Finam API (https://api.finam.ru/v1)

    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API:
        - status: "available" | "unavailable" | "error"
        - code: HTTP —Å—Ç–∞—Ç—É—Å –∫–æ–¥ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
        - message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    """
    try:
        response = requests.get("https://api.finam.ru/v1", timeout=10)
        
        if response.status_code == 200:
            return {
                "status": "available",
                "code": response.status_code,
                "message": "API –¥–æ—Å—Ç—É–ø–µ–Ω",
            }
        else:
            return {
                "status": "unavailable",
                "code": response.status_code,
                "message": f"API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å –∫–æ–¥ {response.status_code}",
            }
    
    except requests.exceptions.Timeout:
        return {
            "status": "error",
            "message": "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç API",
        }
    
    except requests.exceptions.ConnectionError:
        return {
            "status": "error",
            "message": "–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å API",
        }
    
    except requests.exceptions.RequestException as e:
        return {
            "status": "error",
            "message": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API: {str(e)}",
        }


@mcp.tool()
def get_finam_quote(symbol: str) -> dict[str, str | int | float]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∫–æ—Ç–∏—Ä–æ–≤–∫—É –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ Finam API
    
    Args:
        symbol: –¢–∏–∫–µ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "SBER@MISX")
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ—Ç–∏—Ä–æ–≤–∫–µ –∏–ª–∏ –æ—à–∏–±–∫–µ
    """
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π FinamAPIClient
        from ..adapters.finam_client import FinamAPIClient
        
        client = FinamAPIClient()
        result = client.get_quote(symbol)
        
        return {
            "symbol": symbol,
            "data": result,
            "status": "success"
        }
        
    except Exception as e:
        return {
            "symbol": symbol,
            "status": "error",
            "message": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ—Ç–∏—Ä–æ–≤–∫–∏: {str(e)}"
        }


def main() -> None:
    """
    –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ MCP-—Å–µ—Ä–≤–µ—Ä–∞ —á–µ—Ä–µ–∑ HTTP
    """
    print("üöÄ –ó–∞–ø—É—Å–∫ MCP-—Å–µ—Ä–≤–µ—Ä–∞ –≤ —Ä–µ–∂–∏–º–µ HTTP...")
    print("üì° –°–µ—Ä–≤–µ—Ä –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:8765")
    print("üîó MCP endpoint: http://localhost:8765/mcp")
    # print("üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:8765/docs")
    print("=" * 50)
    
    mcp.run(transport="http", host="0.0.0.0", port=8765)


if __name__ == "__main__":
    main()
