"""
–†–µ–∞–ª—å–Ω—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã MCP —Å–µ—Ä–≤–µ—Ä–∞ —Å Finam API

–í–ê–ñ–ù–û: 
- –≠—Ç–∏ —Ç–µ—Å—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç –†–ï–ê–õ–¨–ù–´–ï –∑–∞–ø—Ä–æ—Å—ã –∫ Finam API!
- –ò—Å–ø–æ–ª—å–∑—É—é—Ç –¥–µ–º–æ-–∞–∫–∫–∞—É–Ω—Ç –∏–∑ FINAM_DEMO_ACCOUNT_ID –≤ .env (–±–µ–∑–æ–ø–∞—Å–Ω–æ!)
- –¢—Ä–µ–±—É—é—Ç FINAM_ACCESS_TOKEN –≤ .env —Ñ–∞–π–ª–µ
"""

import pytest


pytestmark = pytest.mark.asyncio


class TestRealAPI:
    """–ü—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∫ Finam API"""

    async def test_check_api_availability(self, mcp_client):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Finam API"""
        result = await mcp_client.call_tool("check_finam_api", {})
        
        print(f"\n‚úÖ API Status: {result.data}")
        assert result.data["status"] in ["available", "unavailable", "error"]

    async def test_get_jwt_token(self, mcp_client, real_finam_token):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞"""
        result = await mcp_client.call_tool("get_jwt_token_details", {})
        
        print(f"\n‚úÖ JWT Token: {result.data}")
        assert "status" in result.data
        assert "message" in result.data

    async def test_refresh_jwt_token(self, mcp_client, real_finam_token):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞"""
        result = await mcp_client.call_tool("refresh_jwt_token", {})
        
        print(f"\n‚úÖ Refresh Token: {result.data}")
        assert "status" in result.data
        assert "message" in result.data

    async def test_get_accounts(self, mcp_client, real_finam_token):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—á–µ—Ç–æ–≤"""
        result = await mcp_client.call_tool("get_finam_accounts", {})
        
        print(f"\n‚úÖ Accounts: {result.data}")
        assert "status" in result.data
        assert "message" in result.data

    async def test_search_instruments(self, mcp_client, real_finam_token):
        """–ü–æ–∏—Å–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ SBER"""
        result = await mcp_client.call_tool(
            "search_finam_instruments",
            {"query": "SBER"}
        )
        
        print(f"\n‚úÖ Search SBER: {result.data}")
        assert "status" in result.data

    async def test_get_quotes(self, mcp_client, real_finam_token):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—Ç–∏—Ä–æ–≤–æ–∫ SBER"""
        result = await mcp_client.call_tool(
            "get_finam_quotes",
            {"symbol": "SBER@MISX"}
        )
        
        print(f"\n‚úÖ Quotes SBER: {result.data}")
        assert "status" in result.data

    async def test_get_orderbook(self, mcp_client, real_finam_token):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞–∫–∞–Ω–∞ –∑–∞—è–≤–æ–∫ SBER"""
        result = await mcp_client.call_tool(
            "get_finam_orderbook",
            {"symbol": "SBER@MISX", "depth": 5}
        )
        
        print(f"\n‚úÖ Orderbook SBER: {result.data}")
        assert "status" in result.data

    async def test_get_candles(self, mcp_client, real_finam_token):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–≤–µ—á–µ–π SBER"""
        result = await mcp_client.call_tool(
            "get_finam_candles",
            {
                "symbol": "SBER@MISX",
                "timeframe": "D",
                "start": "2024-01-01T00:00:00Z",
                "end": "2024-01-10T23:59:59Z"
            }
        )
        
        print(f"\n‚úÖ Candles SBER: {result.data}")
        assert "status" in result.data

    async def test_get_assets(self, mcp_client, real_finam_token):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫—Ç–∏–≤–æ–≤"""
        result = await mcp_client.call_tool("get_finam_assets", {})
        
        print(f"\n‚úÖ Assets: {result.data.get('message', result.data)}")
        assert "status" in result.data

    async def test_full_workflow(self, mcp_client, real_finam_token):
        """
        –ü–æ–ª–Ω—ã–π workflow:
        1. –ü—Ä–æ–≤–µ—Ä–∫–∞ API
        2. –ü–æ–∏—Å–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        3. –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—Ç–∏—Ä–æ–≤–æ–∫
        """
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º API
        api_check = await mcp_client.call_tool("check_finam_api", {})
        print(f"\n1Ô∏è‚É£ API Check: {api_check.data['status']}")
        
        # 2. –ò—â–µ–º SBER
        search = await mcp_client.call_tool(
            "search_finam_instruments",
            {"query": "SBER"}
        )
        print(f"2Ô∏è‚É£ Search SBER: {search.data['status']}")
        
        # 3. –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ç–∏—Ä–æ–≤–∫–∏
        quotes = await mcp_client.call_tool(
            "get_finam_quotes",
            {"symbol": "SBER@MISX"}
        )
        print(f"3Ô∏è‚É£ Get Quotes: {quotes.data['status']}")
        
        assert api_check.data["status"] in ["available", "unavailable", "error"]
        assert "status" in search.data
        assert "status" in quotes.data

    async def test_get_orderbook_depth_limit(self, mcp_client, real_finam_token):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≥–ª—É–±–∏–Ω–∞ —Å—Ç–∞–∫–∞–Ω–∞ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç—Å—è."""

        depth = 3
        result = await mcp_client.call_tool(
            "get_finam_orderbook",
            {"symbol": "SBER@MISX", "depth": depth},
        )

        print(f"\n‚úÖ Depth-limited orderbook: {result.data}")
        assert result.data["status"] == "success"
        rows = result.data["orderbook"]["orderbook"].get("rows", [])
        assert len(rows) <= depth

    async def test_get_assets_payload(self, mcp_client, real_finam_token):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–æ–≤."""

        result = await mcp_client.call_tool("get_finam_assets", {})

        print(f"\n‚úÖ Assets payload: {result.data}")
        assert result.data["status"] == "success"
        assets = result.data.get("assets")
        assert isinstance(assets, list)
        assert assets


class TestRealAPIWithAccounts:
    """–¢–µ—Å—Ç—ã —Å –¥–µ–º–æ-–∞–∫–∫–∞—É–Ω—Ç–æ–º –∏–∑ .env"""

    async def test_get_portfolio(self, mcp_client, real_finam_token, demo_account_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è –¥–µ–º–æ-–∞–∫–∫–∞—É–Ω—Ç–∞"""
        print(f"\nüè¶ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ–º–æ-–∞–∫–∫–∞—É–Ω—Ç: {demo_account_id}")
        
        result = await mcp_client.call_tool(
            "get_finam_portfolio",
            {"account_id": demo_account_id}
        )
        
        print(f"\n‚úÖ Portfolio: {result.data}")
        assert "status" in result.data

    async def test_get_orders(self, mcp_client, real_finam_token, demo_account_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –¥–µ–º–æ-–∞–∫–∫–∞—É–Ω—Ç–∞"""
        print(f"\nüè¶ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ–º–æ-–∞–∫–∫–∞—É–Ω—Ç: {demo_account_id}")
        
        result = await mcp_client.call_tool(
            "get_finam_orders",
            {"account_id": demo_account_id}
        )
        
        print(f"\n‚úÖ Orders: {result.data}")
        assert "status" in result.data

